/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Messages
         * @description 全てのメッセージを取得する.
         */
        get: operations["get_all_messages_messages_get"];
        put?: never;
        /**
         * Stream Create Message
         * @description 新しいメッセージを作成し、AI の応答をストリーミングで返す.
         */
        post: operations["stream_create_message_messages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{chat_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Messages By Chat Id
         * @description チャットIDでメッセージを検索する.
         */
        get: operations["get_messages_by_chat_id_messages__chat_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/sender/{sender_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Messages By Sender Id
         * @description 送信者IDでメッセージを検索する.
         */
        get: operations["get_messages_by_sender_id_messages_sender__sender_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/id/{message_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Message
         * @description IDでメッセージを取得する.
         */
        get: operations["get_message_messages_id__message_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{message_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Message
         * @description メッセージを削除する.
         */
        delete: operations["delete_message_messages__message_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Bulk Delete Messages
         * @description 複数のメッセージを一括削除する.
         */
        delete: operations["bulk_delete_messages_messages_bulk_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rag": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload And Process Rag */
        post: operations["upload_and_process_rag_rag_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Books */
        get: operations["get_books_books_get"];
        put?: never;
        /** Post Book */
        post: operations["post_book_books_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Books By User */
        get: operations["get_books_by_user_books_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/covers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Covers */
        get: operations["get_covers_books_covers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/bulk-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Bulk Delete Books Endpoint */
        delete: operations["bulk_delete_books_endpoint_books_bulk_delete_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{book_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Book */
        get: operations["get_book_books__book_id__get"];
        /** Put Book */
        put: operations["put_book_books__book_id__put"];
        post?: never;
        /** Delete Book */
        delete: operations["delete_book_books__book_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{book_id}/cover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Book Cover */
        get: operations["get_book_cover_books__book_id__cover_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{book_id}/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Book File */
        get: operations["get_book_file_books__book_id__file_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{book_id}/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Annotation */
        put: operations["update_annotation_books__book_id__annotations_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Chat
         * @description チャットを作成する.
         */
        post: operations["create_chat_chats_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chats/{chat_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Chat By Id
         * @description IDでチャットを取得する.
         */
        get: operations["get_chat_by_id_chats__chat_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Chat
         * @description チャットを削除する.
         */
        delete: operations["delete_chat_chats__chat_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chats/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Chats By User Id
         * @description ユーザーIDに紐づくチャットをすべて取得する.
         */
        get: operations["get_chats_by_user_id_chats_user__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chats/user/{user_id}/book/{book_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Chats By User Id And Book Id
         * @description ユーザーIDと本IDに紐づくチャットをすべて取得する.
         */
        get: operations["get_chats_by_user_id_and_book_id_chats_user__user_id__book__book_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chats/{chat_id}/title": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Chat Title
         * @description チャットのタイトルを更新する.
         */
        patch: operations["update_chat_title_chats__chat_id__title_patch"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AnnotationColorEnum
         * @enum {string}
         */
        AnnotationColorEnum: "yellow" | "red" | "green" | "blue";
        /** AnnotationSchema */
        AnnotationSchema: {
            /** Id */
            id: string;
            /** Bookid */
            bookId: string;
            /** Cfi */
            cfi: string;
            color: components["schemas"]["AnnotationColorEnum"];
            /** Notes */
            notes?: string | null;
            /** Spine */
            spine: {
                [key: string]: unknown;
            };
            /** Text */
            text: string;
            type: components["schemas"]["AnnotationTypeEnum"];
        };
        /**
         * AnnotationTypeEnum
         * @enum {string}
         */
        AnnotationTypeEnum: "highlight";
        /** Body_upload_and_process_rag_rag_post */
        Body_upload_and_process_rag_rag_post: {
            /** User Id */
            user_id: string;
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** BookCreateRequest */
        BookCreateRequest: {
            /**
             * Userid
             * @description User ID
             */
            userId: string;
            /**
             * Filedata
             * @description Base64 encoded file data
             */
            fileData: string;
            /**
             * Filename
             * @description File name
             */
            fileName: string;
            /**
             * Bookid
             * @description Book ID (auto-generated if not specified)
             */
            bookId?: string | null;
            /**
             * Bookname
             * @description Book name (file name is used if not specified)
             */
            bookName?: string | null;
            /**
             * Coverimage
             * @description Base64 encoded cover image data
             */
            coverImage?: string | null;
            /**
             * Bookmetadata
             * @description Book metadata (JSON string)
             */
            bookMetadata?: string | null;
        };
        /** BookDetail */
        BookDetail: {
            /** Id */
            id: string;
            /** Annotations */
            annotations?: components["schemas"]["AnnotationSchema"][] | null;
            /** Author */
            author?: string | null;
            /** Bookmetadata */
            bookMetadata?: {
                [key: string]: unknown;
            } | null;
            /** Cfi */
            cfi?: string | null;
            /** Configuration */
            configuration?: {
                [key: string]: unknown;
            } | null;
            /** Coverpath */
            coverPath?: string | null;
            /**
             * Definitions
             * @default []
             */
            definitions: string[];
            /**
             * Hascover
             * @default false
             */
            hasCover: boolean;
            /** Name */
            name: string;
            /**
             * Percentage
             * @default 0
             */
            percentage: number;
            /** Size */
            size: number;
            /** Userid */
            userId?: string | null;
            /** Createdat */
            createdAt?: string | null;
            /** Updatedat */
            updatedAt?: string | null;
        };
        /** BookFileResponse */
        BookFileResponse: {
            /** Success */
            success: boolean;
            /** Url */
            url: string;
            /** Message */
            message?: string | null;
        };
        /** BookResponse */
        BookResponse: {
            /** Success */
            success: boolean;
            data: components["schemas"]["BookDetail"];
            /** Message */
            message?: string | null;
        };
        /** BookUpdateRequest */
        BookUpdateRequest: {
            /**
             * Userid
             * @description User ID
             * @default 91527c9d-48aa-41d0-bb85-dc96f26556a0
             */
            userId: string;
            /**
             * Name
             * @description Book name
             */
            name?: string | null;
            /**
             * Author
             * @description Author name
             */
            author?: string | null;
            /**
             * Cfi
             * @description Current reading position (CFI)
             */
            cfi?: string | null;
            /**
             * Percentage
             * @description Reading progress percentage (%)
             */
            percentage?: number | null;
            /**
             * Annotations
             * @description Annotation information
             */
            annotations?: components["schemas"]["AnnotationSchema"][] | null;
            /**
             * Bookmetadata
             * @description Book metadata
             */
            bookMetadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Definitions
             * @description User defined information
             */
            definitions?: string[] | null;
            /**
             * Configuration
             * @description Book configuration information
             */
            configuration?: {
                [key: string]: unknown;
            } | null;
        };
        /** BooksResponse */
        BooksResponse: {
            /** Success */
            success: boolean;
            /** Data */
            data: components["schemas"]["BookDetail"][];
            /** Count */
            count: number;
            /** Message */
            message?: string | null;
        };
        /** BulkDeleteRequestBody */
        BulkDeleteRequestBody: {
            /** Bookids */
            bookIds: string[];
        };
        /** BulkDeleteResponse */
        BulkDeleteResponse: {
            /** Success */
            success: boolean;
            /** Deletedids */
            deletedIds: string[];
            /** Count */
            count: number;
            /** Message */
            message?: string | null;
        };
        /** ChatCreateRequest */
        ChatCreateRequest: {
            /**
             * Userid
             * @description ユーザーID
             */
            userId: string;
            /**
             * Title
             * @description チャットのタイトル
             */
            title?: string | null;
            /**
             * Bookid
             * @description 関連する本のID
             */
            bookId?: string | null;
        };
        /** ChatResponse */
        ChatResponse: {
            /**
             * Id
             * @description チャットID
             */
            id: string;
            /**
             * Userid
             * @description ユーザーID
             */
            userId: string;
            /**
             * Title
             * @description チャットのタイトル
             */
            title: string;
            /**
             * Bookid
             * @description 関連する本のID
             */
            bookId?: string | null;
            /**
             * Createdat
             * Format: date-time
             * @description 作成日時
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             * @description 更新日時
             */
            updatedAt: string;
        };
        /** ChatUpdateTitleRequest */
        ChatUpdateTitleRequest: {
            /**
             * Title
             * @description 更新するチャットのタイトル
             */
            title: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * MessageBulkDelete
         * @description 複数メッセージ削除リクエストモデル.
         */
        MessageBulkDelete: {
            /**
             * Messageids
             * @description 削除するメッセージIDのリスト
             */
            messageIds: string[];
        };
        /**
         * MessageCreate
         * @description メッセージ作成リクエストモデル.
         */
        MessageCreate: {
            /**
             * Content
             * @description メッセージの内容
             */
            content: string;
            /**
             * Chatid
             * @description メッセージが所属するチャットID
             */
            chatId: string;
            /**
             * Senderid
             * @description 送信者ID
             */
            senderId: string;
            /**
             * Metadata
             * @description メッセージの追加情報
             */
            metadata?: {
                [key: string]: unknown;
            } | null;
            /**
             * Bookid
             * @description メッセージが所属するブックID
             */
            bookId?: string | null;
        };
        /**
         * MessageListResponse
         * @description メッセージリストレスポンスモデル.
         */
        MessageListResponse: {
            /** Data */
            data: components["schemas"]["MessageResponse"][];
            /** Total */
            total: number;
        };
        /**
         * MessageResponse
         * @description メッセージレスポンスモデル.
         */
        MessageResponse: {
            /** Id */
            id: string;
            /** Content */
            content: string;
            /** Senderid */
            senderId: string;
            senderType: components["schemas"]["SenderTypeEnum"];
            /** Chatid */
            chatId: string;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /**
             * Updatedat
             * Format: date-time
             */
            updatedAt: string;
            /** Metadata */
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        /** RagChunk */
        RagChunk: {
            /** Text */
            text: string;
            /**
             * Metadata
             * @default {}
             */
            metadata: {
                [key: string]: unknown;
            };
        };
        /** RagProcessResponse */
        RagProcessResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message?: string | null;
            /** Filename */
            fileName: string;
            /** Chunkcount */
            chunkCount: number;
            /** Userid */
            userId?: string | null;
            /** Indexname */
            indexName?: string | null;
            /** Chunks */
            chunks?: components["schemas"]["RagChunk"][] | null;
        };
        /**
         * SenderTypeEnum
         * @enum {string}
         */
        SenderTypeEnum: "user" | "assistant";
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_all_messages_messages_get: {
        parameters: {
            query?: {
                /** @description Skip records */
                skip?: number;
                /** @description Limit records */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stream_create_message_messages_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MessageCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_messages_by_chat_id_messages__chat_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description メッセージを検索するチャットID */
                chat_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_messages_by_sender_id_messages_sender__sender_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description メッセージを検索する送信者ID */
                sender_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_message_messages_id__message_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 取得するメッセージID */
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_message_messages__message_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description 削除するメッセージID */
                message_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_delete_messages_messages_bulk_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MessageBulkDelete"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string[];
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_and_process_rag_rag_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_and_process_rag_rag_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RagProcessResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_books_books_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BooksResponse"];
                };
            };
        };
    };
    post_book_books_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_books_by_user_books_user__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BooksResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_covers_books_covers_get: {
        parameters: {
            query?: {
                user_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    bulk_delete_books_endpoint_books_bulk_delete_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkDeleteRequestBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkDeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_book_books__book_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    put_book_books__book_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_book_books__book_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_book_cover_books__book_id__cover_get: {
        parameters: {
            query: {
                user_id: string;
            };
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_book_file_books__book_id__file_get: {
        parameters: {
            query: {
                user_id: string;
            };
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookFileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_annotation_books__book_id__annotations_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_chat_chats_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chat_by_id_chats__chat_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chat_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_chat_chats__chat_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chat_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chats_by_user_id_chats_user__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_chats_by_user_id_and_book_id_chats_user__user_id__book__book_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_chat_title_chats__chat_id__title_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                chat_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatUpdateTitleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChatResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
